const express = require("express");
const {DeleteObjectsCommand, ListObjectsV2Command,  ListMultipartUploadsCommand, AbortMultipartUploadCommand} = require("@aws-sdk/client-s3");
const r2 = require("../config/r2");
const router = express.Router();
const UploadController = require("../controllers/uploadController");

// router.post("/upload-video-hls", async (req, res) => {
//   try {
//     const { id } = req.body; // L·∫•y id t·ª´ request body

//     if (!id) {
//       return res.status(400).send("Thi·∫øu ID trong request.");
//     }

//     // Ki·ªÉm tra th∆∞ m·ª•c c√≥ t·ªìn t·∫°i kh√¥ng
//     if (!fs.existsSync(SEGMENT_VIDEO_DIR)) {
//       return res.status(400).send("Th∆∞ m·ª•c HLS kh√¥ng t·ªìn t·∫°i.");
//     }

//     const hasFiles = await containsFiles(SEGMENT_VIDEO_DIR);
//     if (!hasFiles) {
//       return res.status(400).send("Kh√¥ng c√≥ file n√†o ƒë·ªÉ t·∫£i l√™n.");
//     }

//     // ƒê·ªçc c·∫•u tr√∫c th∆∞ m·ª•c HLS v√† t·∫£i l√™n Cloudflare R2
//     await uploadHlsFolder(SEGMENT_VIDEO_DIR, `video/${id}`); // Upload th∆∞ m·ª•c HLS v·ªõi ID
    
//     await emptyDirectory(SEGMENT_VIDEO_DIR); // L√†m r·ªóng th∆∞ m·ª•c sau khi upload xong

//     res.status(200).send({ message: "T·∫•t c·∫£ t·ªáp ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n th√†nh c√¥ng!", id });
//   } catch (err) {
//     console.error("Error during upload:", err);
//     res.status(500).send("ƒê√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh t·∫£i l√™n.");
//   }
// });
router.post("/upload-video-hls", UploadController.uploadVideoHLS);
router.post("/upload-trailer-hls", UploadController.uploadTrailerHLS);

// router.post("/upload-trailer-hls", async (req, res) => {
//   try {
//     const { id } = req.body; // L·∫•y id t·ª´ request body

//     if (!id) {
//       return res.status(400).send("Thi·∫øu ID trong request.");
//     }
//     // Ki·ªÉm tra th∆∞ m·ª•c c√≥ t·ªìn t·∫°i kh√¥ng
//     if (!fs.existsSync(SEGMENT_TRAILER_DIR)) {
//       return res.status(400).send("Th∆∞ m·ª•c HLS kh√¥ng t·ªìn t·∫°i.");
//     }

//     const hasFiles = await containsFiles(SEGMENT_TRAILER_DIR);
//     if (!hasFiles) {
//       return res.status(400).send("Kh√¥ng c√≥ file n√†o ƒë·ªÉ t·∫£i l√™n.");
//     }

//     // ƒê·ªçc c·∫•u tr√∫c th∆∞ m·ª•c HLS v√† t·∫£i l√™n Cloudflare R2
//     await uploadHlsFolder(SEGMENT_TRAILER_DIR, `trailer/${id}`); // Upload th∆∞ m·ª•c HLS
//     await emptyDirectory(SEGMENT_TRAILER_DIR); // L√†m r·ªóng th∆∞ m·ª•c sau khi upload xong

//     res.status(200).send({ message: "T·∫•t c·∫£ t·ªáp ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n th√†nh c√¥ng!" });
//   } catch (err) {
//     console.error("Error during upload:", err);
//     res.status(500).send("ƒê√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh t·∫£i l√™n.");
//   }
// });

// router.post("/check-video-hls", async (req, res) => {
//   try {
//     const { id } = req.body; // L·∫•y id t·ª´ request body

//     if (!id) {
//       return res.status(400).send("Thi·∫øu ID trong request.");
//     }
//     // Ki·ªÉm tra th∆∞ m·ª•c c√≥ t·ªìn t·∫°i kh√¥ng
//     if (!fs.existsSync(SEGMENT_VIDEO_DIR)) {
//       return res.status(400).send("Th∆∞ m·ª•c HLS kh√¥ng t·ªìn t·∫°i.");
//     }

//     const hasFiles = await containsFiles(SEGMENT_VIDEO_DIR);
//     if (!hasFiles) {
//       return res.status(400).send("Kh√¥ng c√≥ file n√†o ƒë·ªÉ t·∫£i l√™n.");
//     }

//     res.status(200).send({ message: "S·∫µn s√†ng t·∫£i l√™n" });
//   } catch (err) {
//     console.error("Error during upload:", err);
//     res.status(500).send("ƒê√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh t·∫£i l√™n.");
//   }
// });
router.post("/check-video-hls", UploadController.checkVideoHLS);
router.post("/check-trailer-hls", UploadController.checkTrailerHLS);

// router.post("/check-trailer-hls", async (req, res) => {
//   try {
//     const { id } = req.body; // L·∫•y id t·ª´ request body

//     if (!id) {
//       return res.status(400).send("Thi·∫øu ID trong request.");
//     }
//     // Ki·ªÉm tra th∆∞ m·ª•c c√≥ t·ªìn t·∫°i kh√¥ng
//     if (!fs.existsSync(SEGMENT_TRAILER_DIR)) {
//       return res.status(400).send("Th∆∞ m·ª•c HLS kh√¥ng t·ªìn t·∫°i.");
//     }

//     const hasFiles = await containsFiles(SEGMENT_TRAILER_DIR);
//     if (!hasFiles) {
//       return res.status(400).send("Kh√¥ng c√≥ file n√†o ƒë·ªÉ t·∫£i l√™n.");
//     }

//     res.status(200).send({ message: "S·∫µn s√†ng t·∫£i l√™n" });
//   } catch (err) {
//     console.error("Error during upload:", err);
//     res.status(500).send("ƒê√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh t·∫£i l√™n.");
//   }
// });

// API x√≥a to√†n b·ªô th∆∞ m·ª•c tr√™n R2
// router.delete("/delete-folder", async (req, res) => {
//   try {
//     const { folderPath } = req.body;
//     if (!folderPath) {
//       return res.status(400).json({ message: "Thi·∫øu folderPath trong request" });
//     }

//     // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n c√≥ d·∫•u `/` ·ªü cu·ªëi
//     const prefix = folderPath.endsWith("/") ? folderPath : `${folderPath}/`;

//     // B∆∞·ªõc 1: Li·ªát k√™ t·∫•t c·∫£ c√°c file trong th∆∞ m·ª•c
//     const listParams = {
//       Bucket: process.env.CLOUDFLARE_R2_BUCKET_NAME,
//       Prefix: prefix,
//     };

//     const listedObjects = await r2.send(new ListObjectsV2Command(listParams));

//     if (!listedObjects.Contents || listedObjects.Contents.length === 0) {
//       return res.status(404).json({ message: "Th∆∞ m·ª•c r·ªóng ho·∫∑c kh√¥ng t·ªìn t·∫°i" });
//     }

//     // B∆∞·ªõc 2: X√≥a t·∫•t c·∫£ c√°c file ƒë√£ t√¨m th·∫•y
//     const deleteParams = {
//       Bucket: process.env.CLOUDFLARE_R2_BUCKET_NAME,
//       Delete: {
//         Objects: listedObjects.Contents.map((obj) => ({ Key: obj.Key })),
//       },
//     };

//     await r2.send(new DeleteObjectsCommand(deleteParams));

//     res.json({ message: `ƒê√£ x√≥a to√†n b·ªô th∆∞ m·ª•c ${folderPath} th√†nh c√¥ng!` });
//   } catch (error) {
//     console.error("‚ùå L·ªói khi x√≥a th∆∞ m·ª•c:", error);
//     res.status(500).json({ message: "L·ªói server khi x√≥a th∆∞ m·ª•c" });
//   }
// });
router.delete("/delete-folder", UploadController.deleteFolderFromR2);

// H√†m ƒë·ªÉ ƒë·ªá quy t·∫£i l√™n c√°c t·ªáp trong th∆∞ m·ª•c HLS

// async function uploadHlsFolder(localFolderPath, r2FolderPath) {
//   try {
//     const files = await fs.promises.readdir(localFolderPath);

//     for (const file of files) {
//       const localFilePath = path.join(localFolderPath, file);
//       const r2FilePath = path.posix.join(r2FolderPath, file); // S·ª≠ d·ª•ng path.posix.join ƒë·ªÉ lu√¥n s·ª≠ d·ª•ng d·∫•u "/"

//       const stats = await fs.promises.stat(localFilePath);

//       if (stats.isDirectory()) {
//         // N·∫øu l√† th∆∞ m·ª•c, g·ªçi ƒë·ªá quy ƒë·ªÉ upload
//         await uploadHlsFolder(localFilePath, r2FilePath);
//       } else {
//         // N·∫øu l√† t·ªáp, upload t·ªáp l√™n Cloudflare R2
//         await uploadFileToR2(localFilePath, r2FilePath);
//       }
//     }
//     // const uploadPromises = files.map((file) =>
//     //   limit(async () => {
//     //     const localFilePath = path.join(localFolderPath, file);
//     //     const r2FilePath = path.posix.join(r2FolderPath, file);
//     //     const stats = await fs.promises.stat(localFilePath);
//     //     if (stats.isDirectory()) {
//     //       return uploadHlsFolder(localFilePath, r2FilePath);
//     //     } else {
//     //       return uploadFileToR2(localFilePath, r2FilePath);
//     //     }
//     //   })
//     // );
//     // await Promise.all(uploadPromises);
//     console.log(`‚úî Th∆∞ m·ª•c ${localFolderPath} ƒë√£ upload xong.`);
//   } catch (err) {
//     console.error("‚ùå L·ªói khi upload th∆∞ m·ª•c:", err);
//     throw new Error("L·ªói khi upload th∆∞ m·ª•c");
//   }
// }

// async function uploadFileToR2(localFilePath, r2FilePath) {
//   try {
//     const stats = await fs.promises.stat(localFilePath);
//     console.log(`üìÇ B·∫Øt ƒë·∫ßu t·∫£i l√™n: ${localFilePath}, K√≠ch th∆∞·ªõc: ${stats.size} bytes`);

//     const upload = new Upload({
//       client: r2,
//       params: {
//         Bucket: process.env.CLOUDFLARE_R2_BUCKET_NAME,
//         Key: r2FilePath,
//         Body: fs.createReadStream(localFilePath),
//         ContentType: getContentType(localFilePath),
//       },
//     });
//     await upload.done();
//     console.log(`T·ªáp ${localFilePath} ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n th√†nh c√¥ng.`);
//   } catch (err) {
//     console.error(`L·ªói khi t·∫£i l√™n t·ªáp ${localFilePath}:`, err);
//     throw new Error(`L·ªói khi t·∫£i l√™n t·ªáp ${localFilePath}`);
//   }
// }

//---------------------------------------//
// async function uploadHlsFolder(localFolderPath, r2FolderPath) {
//   try {
//     console.log(`üìÇ ƒê·ªçc th∆∞ m·ª•c: ${localFolderPath}`);
//     const files = await fs.promises.readdir(localFolderPath);

//     const uploadPromises = files.map(async (file) =>
//       limit(async () => {
//         const localFilePath = path.join(localFolderPath, file);
//         console.log(`üìÑ Ki·ªÉm tra file: ${localFilePath}`);
//         const stats = await fs.promises.stat(localFilePath);
        
//         if (stats.isDirectory()) {
//           console.log(`üìÇ Th∆∞ m·ª•c con: ${localFilePath} -> G·ªçi ƒë·ªá quy`);
//           await uploadHlsFolder(localFilePath, path.posix.join(r2FolderPath, file));
//         } else {
//           console.log(`üì§ Upload file: ${localFilePath} -> ${r2FolderPath}/${file}`);
//           await uploadFileToR2(localFilePath, path.posix.join(r2FolderPath, file));
//         }
//       })
//     );

//     await Promise.all(uploadPromises);
//     console.log(`‚úî Th∆∞ m·ª•c ${localFolderPath} ƒë√£ upload xong.`);
//   } catch (err) {
//     console.error("‚ùå L·ªói khi upload th∆∞ m·ª•c:", err);
//   }
// }




// // H√†m upload t·ªáp l√™n Cloudflare R2
// async function uploadFileToR2(localFilePath, r2FilePath) {
//   try {
//     // S·ª≠a r2FilePath ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng tr√πng l·∫∑p v·ªõi t√™n th∆∞ m·ª•c g·ªëc
//     const uploadParams = {
//       Bucket: process.env.CLOUDFLARE_R2_BUCKET_NAME, // T√™n bucket
//       Key: r2FilePath, // ƒê∆∞·ªùng d·∫´n trong bucket (gi·ªØ nguy√™n c·∫•u tr√∫c th∆∞ m·ª•c)
//       Body: fs.createReadStream(localFilePath), // N·ªôi dung t·ªáp
//       ContentType: getContentType(localFilePath), // Lo·∫°i t·ªáp
//     };

//     const command = new PutObjectCommand(uploadParams);
//     await r2.send(command);
//   } catch (err) {
//     console.error(`Error uploading file ${localFilePath}:`, err);
//     throw new Error(`Error uploading file ${localFilePath}`);
//   }
// }

// H√†m ƒë·ªÉ x√°c ƒë·ªãnh Content-Type d·ª±a tr√™n ƒëu√¥i t·ªáp

router.post("/upload-test", async (req, res) => {
  const { localFolderPath, r2FolderPath } = req.body;

  if (!localFolderPath || !r2FolderPath) {
    return res.status(400).json({ error: "Missing parameters: localFolderPath or r2FolderPath" });
  }

  try {
    const result = await uploadHlsFolder(localFolderPath, r2FolderPath);
    if (result.success) {
      res.json(result);
    } else {
      res.status(500).json(result);
    }
  } catch (err) {
    res.status(500).json({ error: "Upload failed", details: err.message });
  }
});

router.delete("/multipart-uploads", async (req, res) => {
  try {
    // 1Ô∏è‚É£ Li·ªát k√™ t·∫•t c·∫£ Multipart Upload ch∆∞a ho√†n th√†nh
    const listCommand = new ListMultipartUploadsCommand({
      Bucket: process.env.CLOUDFLARE_R2_BUCKET_NAME,
    });

    const response = await r2.send(listCommand);
    const uploads = response.Uploads || [];

    if (uploads.length === 0) {
      return res.json({ message: "‚úÖ Kh√¥ng c√≥ multipart upload n√†o c·∫ßn h·ªßy." });
    }

    // 2Ô∏è‚É£ H·ªßy t·∫•t c·∫£ Multipart Upload ch∆∞a ho√†n th√†nh
    for (const upload of uploads) {
      const abortCommand = new AbortMultipartUploadCommand({
        Bucket: process.env.CLOUDFLARE_R2_BUCKET_NAME,
        Key: upload.Key,
        UploadId: upload.UploadId,
      });

      await r2.send(abortCommand);
      console.log(`üõë ƒê√£ h·ªßy multipart upload: ${upload.Key} (UploadId: ${upload.UploadId})`);
    }

    res.json({ message: "‚úî T·∫•t c·∫£ multipart upload ch∆∞a ho√†n th√†nh ƒë√£ b·ªã h·ªßy." });
  } catch (error) {
    console.error("‚ùå L·ªói khi x·ª≠ l√Ω multipart upload:", error);
    res.status(500).json({ error: "L·ªói khi x·ª≠ l√Ω multipart upload." });
  }
});

module.exports = router;
